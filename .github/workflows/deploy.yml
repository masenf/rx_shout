# Set Github Actions secrets
#  - DOCKER_HOST: The IP address of the remote host to deploy on
#  - SSH_PRIVATE_KEY: The private key to use for SSH
#  - DOMAIN: The domain to use for the app
#  - GOOGLE_CLIENT_ID: The Google OAuth client ID for Sign in with Google

on:
    push:
        branches: [main]

# Avoid racing deployments
concurrency:
    group: main-deploy

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v4
        # copy ssh key to ~/.ssh/id_rsa
        - name: Copy SSH key
          run: |
            mkdir -p ~/.ssh/
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -H ${{ secrets.DOCKER_HOST }} > ~/.ssh/known_hosts
        # Update the .env file
        - name: Update .env
          run: |
            echo "DOMAIN=${{ secrets.DOMAIN }}" > .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
        # rsync local checkout to deploy directory
        - name: Rsync
          run: rsync -avz --delete --exclude .git/ --exclude .github/ . root@${{ secrets.DOCKER_HOST }}:/app
        # build image with docker compose
        - name: Build image
          run: ssh root@${{ secrets.DOCKER_HOST}} "export DOMAIN=${{ secrets.DOMAIN }}; cd /app && docker compose build"
        # Restart the webserver to serve new frontend
        - name: Restart Webserver
          run: ssh root@${{ secrets.DOCKER_HOST }} "cd /app && docker compose -f compose.yaml -f compose.prod.yaml up -d webserver --no-deps"
        # Bring up the new app container
        - name: Create new app container
          run: ssh root@${{ secrets.DOCKER_HOST }} "cd /app && docker compose -f compose.yaml -f compose.prod.yaml up -d app --scale app=2 --no-recreate"
        # Delete the old container after 30 seconds
        - name: Delete old container
          run: sleep 30 && ssh root@${{ secrets.DOCKER_HOST }} "cd /app && docker compose ps app | tail -n +2 | cut -d ' ' -f 1 | sort -V | head -n 1 | xargs docker rm -f && docker compose -f compose.yaml -f compose.prod.yaml up -d --scale app=1 --no-recreate"
        # Clean up unused images, etc on server
        - name: Docker system prune
          run: ssh root@${{ secrets.DOCKER_HOST }} "docker system prune -f"
